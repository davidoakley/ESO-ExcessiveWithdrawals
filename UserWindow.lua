---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by david.
--- DateTime: 03/05/2025 14:47
---

local Window = ExcessiveWithdrawals.window
local UserWindow = ExcessiveWithdrawals.userWindow
local fmtnum = ExcessiveWithdrawals.fmtnum
local GetColorDefForValue = ExcessiveWithdrawals.GetColorDefForValue

UserWindow.users = nil
UserWindow.processing = 0

function UserWindow:Init()
	ZO_ScrollList_AddDataType(self.listCtrl, 0, "EWUserWindow_Row", 35, function(...) self:LayoutRow(...) end, nil, nil, nil)
	ZO_ScrollList_AddDataType(self.listCtrl, 1, "EWUserWindow_DateRow", 35, function(...) self:LayoutRow(...) end, nil, nil, nil)
end

function UserWindow:Open(guildId, userName)
	self.guildId = guildId
	self:SetHidden(false)
	self:BringWindowToTop()

	local userObj = ExcessiveWithdrawals:GetUser(userName, GetTimeStamp())
	self.userName = userObj.userName or userName
	self.titleLabel:SetText(GetGuildName(guildId) .. " - " .. self.userName)

	self:UpdateData()
	if not self.users then
		self:FetchTransactions()
	end
end

function UserWindow:Close()
	self:SetHidden(true)
end

function UserWindow:Copy()
	if ExcessiveWithdrawals:CheckData(self.userName) == false then return true end
	CHAT_SYSTEM:AddMessage(ExcessiveWithdrawals:GetUserHistory(self.userName))
	ZO_Alert(UI_ALERT_CATEGORY_ALERT, SOUNDS.POSITIVE_CLICK, "Summary written to chat window")
end

local function eventTimeComparison(x,y)
	return x.eventTime > y.eventTime
end

function UserWindow:UpdateData()
	local userObj = ExcessiveWithdrawals:GetUser(self.userName, GetTimeStamp())
	local summary = ExcessiveWithdrawals:UserSummary(self.guildId, self.userName, userObj)
	summary.member = GetGuildMemberIndexFromDisplayName(self.guildId, self.userName) and true
	self:SetSummary(summary)

	local lcUserName = string.lower(self.userName)
	if not self.users or not self.users[lcUserName] or not self.users[lcUserName].transactions then
		return
	end
	local transactions = self.users[lcUserName].transactions
	table.sort(transactions, eventTimeComparison)
	local balance = userObj.goldDeposit - userObj.goldWithdraw + userObj.itemsDepositVal - userObj.itemsWithdrawVal
	self:ProcessBalances(transactions, balance)

	ZO_ScrollList_Clear(self.listCtrl)
	local scrollData = ZO_ScrollList_GetDataList(self.listCtrl)

	--d("Showing "..#transactions.." transactions")
	for i = 1, #transactions do
		local entry = ZO_ScrollList_CreateDataEntry(0, transactions[i])
		table.insert(scrollData, entry)
	end

	ZO_ScrollList_Commit(self.listCtrl)
end

function UserWindow:LayoutRow(rowCtrl, data, _)

	local name
	if data.cash then
		if data.cash >= 0 then
			name = "|cAAFFAACash Donation|r"
		else
			name = "|cFFCC99Cash Withdrawal|r"
		end
	else
		if data.qty > 0 then
			name = "|cAAFFAAAdded " .. data.qty .. " x|r " .. data.item
		elseif data.qty < 0 then
			name = "|cFFCC99Removed " .. -data.qty .. " x|r " .. data.item
		else
			name = "Replaced " .. data.item
		end
	end

	if data.transactions and #data.transactions > 1 then
		name = name .. " (" .. table.concat(data.transactions, " ") .. ")"
	end

	local price = data.price or data.cash

	rowCtrl.nameLabel:SetText(name or "-")

	rowCtrl.dateLabel:SetText(os.date('%Y-%m-%d %H:%M:%S',data.eventTime) or "-")
	rowCtrl.priceLabel:SetText(fmtnum(price, true) or "-")
	rowCtrl.balanceLabel:SetText(fmtnum(data.balance, true) or "-")

	rowCtrl.nameLabel:SetWrapMode(TEXT_WRAP_MODE_ELLIPSIS)

	--local colour = data.member and ZO_DEFAULT_ENABLED_COLOR or ZO_DEFAULT_DISABLED_COLOR
	rowCtrl.priceLabel:SetColor(GetColorDefForValue(price):UnpackRGBA())
	rowCtrl.balanceLabel:SetColor(GetColorDefForValue(data.balance):UnpackRGBA())
end

function UserWindow:ProcessEvent(event)
	local info = event:GetEventInfo()
	local user = "@" .. string.lower(info.displayName)
	local eventTime = event:GetEventTimestampS()
	if not self.users[user] then self.users[user] = { userName = info.displayName, transactions = {}, balance = 0 } end
	local userObj = self.users[user]

	if event:GetEventCategory() == GUILD_HISTORY_EVENT_CATEGORY_BANKED_CURRENCY then
		self:ProcessCashEvent(userObj, event, eventTime, info)
	else
		self:ProcessItemEvent(userObj, event, eventTime, info)
	end
	if user == string.lower(self.userName) then
		self:UpdateData()
	end
end

local function insertOrConsolidate(transactions, newTxn)

	if newTxn.item then
		local startTime = newTxn.eventTime - 4*60*60 -- look back 4 hours
		for i = 1, #transactions do
			local oldTxn = transactions[i]
			if oldTxn.eventTime >= startTime and oldTxn.item == newTxn.item then
				if oldTxn.transactions then
					table.insert(oldTxn.transactions, fmtnum(newTxn.qty, true))
				else
					oldTxn.transactions = { fmtnum(oldTxn.qty, true), fmtnum(newTxn.qty, true) }
				end

				oldTxn.qty = oldTxn.qty + newTxn.qty
				oldTxn.price = oldTxn.price + newTxn.price
				--if oldTxn.qty == 0 then -- Cancelled out!
				--	table.remove(transactions, i)
				--end
				return -- Consolidated - return without inserting the new transaction!
			end
		end
	end
	table.insert(transactions, newTxn)
end

function UserWindow:ProcessItemEvent(userObj, event, eventTime, info)
	--local category = event:GetEventCategory()
	local type = event:GetEventType()
	local qty = info.quantity

	if qty < 0 then qty = qty * -1 end
	local price = (info.quantity ~= 0) and ExcessiveWithdrawals:GetPrice(info.itemLink) * qty or 0

	if type == GUILD_HISTORY_BANKED_ITEM_EVENT_ADDED then
		userObj.balance = userObj.balance + price
		insertOrConsolidate(userObj.transactions, {
			eventTime = eventTime,
			item = info.itemLink,
			qty = qty,
			--name = "|cAAFFAAAdded " .. qty .. " x|r " .. info.itemLink,
			price = price
		})
		--userObj.itemsDeposit = userObj.itemsDeposit + qty
		--userObj.itemsDepositVal = userObj.itemsDepositVal + price
		if ExcessiveWithdrawals.db.logging then d(string.format("%s - %s: +%d %s (worth %d)", ExcessiveWithdrawals.displayName, userObj.userName, qty, info.itemLink, price)) end
	elseif type == GUILD_HISTORY_BANKED_ITEM_EVENT_REMOVED then
		userObj.balance = userObj.balance - price
		insertOrConsolidate(userObj.transactions, {
			eventTime = eventTime,
			item = info.itemLink,
			qty = -qty,
			--name = "|cFFCC99Removed " .. qty .. " x|r " .. info.itemLink,
			price = -price
		})
		--userObj.itemsWithdraw = userObj.itemsWithdraw + qty
		--userObj.itemsWithdrawVal = userObj.itemsWithdrawVal + price
		if ExcessiveWithdrawals.db.logging then d(string.format("%s - %s: -%d %s (worth %d)", ExcessiveWithdrawals.displayName, userObj.userName, qty, info.itemLink, price)) end
	end
end

function UserWindow:ProcessCashEvent(userObj, event, eventTime, info)
	local type = event:GetEventType()
	local amount = info.amount

	if amount then
		if type == GUILD_HISTORY_BANKED_CURRENCY_EVENT_DEPOSITED then
			userObj.balance = userObj.balance + amount
			insertOrConsolidate(userObj.transactions, {
				eventTime = eventTime,
				--name = "|cAAFFAACash Donation|r",
				cash = amount
			})
			--userObj.goldDeposit = userObj.goldDeposit + amount
			if ExcessiveWithdrawals.db.logging then d(string.format("%s - %s: +%d gold", ExcessiveWithdrawals.displayName, userObj.userName, amount)) end
		elseif type == GUILD_HISTORY_BANKED_CURRENCY_EVENT_WITHDRAWN then
			userObj.balance = userObj.balance - amount
			insertOrConsolidate(userObj.transactions, {
				eventTime = eventTime,
				--name = "|cFFCC99Cash Withdrawal|r",
				cash = -amount
			})
			--userObj.goldWithdraw = userObj.goldWithdraw + amount
			if ExcessiveWithdrawals.db.logging then d(string.format("%s - %s: -%d gold", ExcessiveWithdrawals.displayName, userObj.userName, amount)) end
		end
	else
		d("Stored event for nil amount event")
		ExcessiveWithdrawals.event = event
	end
end

local function processItems(self, lib, guildId, eventCategory)
	local processor = lib:CreateGuildHistoryProcessor(guildId, eventCategory, "ExcessiveWithdrawals_UserWindow")
	if not processor then
		-- the processor could not be created
		return
	end

	processor:SetStopOnLastCachedEvent(true)
	processor:SetOnStopCallback(function (reason)
		--d("UserWindow.processing("..eventCategory..") stopped: " .. reason)
		UserWindow.processing = UserWindow.processing - 1
		if UserWindow.processing == 0 then
			UserWindow.spinnerCtrl:Hide()
			--d("HIDE")
		end
	end)

	--local now = GetTimeStamp()

	local started = processor:StartStreaming(nil, function(event)
		self:ProcessEvent(event)
	end)

	if not started then
		d("Failed to start processor for category "..eventCategory)
		self.processing = self.processing - 1
		if UserWindow.processing == 0 then UserWindow.spinnerCtrl:Hide() end
	end
end

function UserWindow:FetchTransactions()
	self.users = {}
	self.processing = 2
	self.spinnerCtrl:Show()

	LibHistoire:OnReady(function(lib)
		processItems(self, lib, self.guildId, GUILD_HISTORY_EVENT_CATEGORY_BANKED_ITEM)
		processItems(self, lib, self.guildId, GUILD_HISTORY_EVENT_CATEGORY_BANKED_CURRENCY)
	end)
end

function UserWindow:ProcessBalances(sortedTransactions, endBalance)
	--local balance = 0
	--for i = #sortedTransactions, 1, -1 do
	--	balance = balance + (sortedTransactions[i].price or sortedTransactions[i].cash)
	--	sortedTransactions[i].balance = balance
	--end
	local balance = endBalance
	for i = 1, #sortedTransactions do
		sortedTransactions[i].balance = balance
		balance = balance - (sortedTransactions[i].price or sortedTransactions[i].cash)
	end
end

function UserWindow:SetSummary(data)

	--local _, _, rankIndex, _, _ = GetGuildMemberInfo(self.guildId, GetGuildMemberIndexFromDisplayName(self.guildId, self.userName))
	local rankName = data.member and GetGuildRankCustomName(self.guildId, data.rankIndex) or "Not a member"

	--self.summaryCtrl.nameLabel:SetText(data.userName or "-")
	self.summaryCtrl.addedLabel:SetText(fmtnum(data.itemsDepositVal) or "-")
	self.summaryCtrl.removedLabel:SetText(fmtnum(data.itemsWithdrawVal) or "-")
	local cashDonated = data.goldDeposit - data.goldWithdraw
	self.summaryCtrl.donatedLabel:SetText(fmtnum(cashDonated) or "-")
	self.summaryCtrl.balanceLabel:SetText((fmtnum(data.balance)) or "-")
	self.summaryCtrl.rankLabel:SetText(rankName or "-")

	--local colour = data.member and ZO_DEFAULT_ENABLED_COLOR or ZO_DEFAULT_DISABLED_COLOR
	local colourOverride = not data.member and ZO_ColorDef:New("999999")
	--local colour = colourOverride or ZO_DEFAULT_ENABLED_COLOR

	--self.summaryCtrl.nameLabel:SetColor(colour:UnpackRGBA())
	self.summaryCtrl.addedLabel:SetColor((colourOverride or GetColorDefForValue(1)):UnpackRGBA())
	self.summaryCtrl.removedLabel:SetColor((colourOverride or GetColorDefForValue(-1)):UnpackRGBA())
	self.summaryCtrl.donatedLabel:SetColor((colourOverride or GetColorDefForValue(1)):UnpackRGBA())
	self.summaryCtrl.balanceLabel:SetColor((colourOverride or GetColorDefForValue(data.balance)):UnpackRGBA())

	local rankColour = ExcessiveWithdrawals.GetColorDefForRank(data.rankIndex)
	self.summaryCtrl.rankLabel:SetColor((colourOverride or rankColour):UnpackRGBA())
end